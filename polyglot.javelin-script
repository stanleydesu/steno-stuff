// Steno
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |  S1  |   T  |   P  |   H  |  *1  |        |  *2  |   F  |   P  |   L  |   T  |    D   |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  S2  |   K  |   W  |   R  |  *3  |        |  *4  |   R  |   B  |   G  |   S  |    Z   |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// | Vol+   | Shift| Ctrl |  Alt | Meta | Space|        | Vol- | Left | Down |  Up  | Right| QWERTY |
// `----------------------+------+------+------+        |------+------+------+----------------------'
//                        |  #1  |   A  |   O  |        |   E  |   U  |  #2  |
//                        `--------------------'        `--------------------'
//
// * Tapping QWERTY key will switch to QWERTY mode
// * Holding it down and pressing other buttons will cause the keyboard to return to steno mode when
//   releasing it. This will also give access to the Symbols, Navigation and Function layers by
//   pressing those keys on the QWERTY layer.

// QWERTY
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |   Tab  |   Q  |   W  |   E  |   R  |   T  |        |   Y  |   U  |   I  |   O  |   P  |  Bksp  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |  Ctrl  |   A  |   S  |   D  |   F  |   G  |        |   H  |   J  |   K  |   L  | ;  : |  ' "   |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// | Shift  |   Z  |   X  |   C  |   V  |   B  |        |   N  |   M  | ,  < | .  > | /  ? |Shf/Sten|
// `----------------------+------+------+------+        |------+------+------+----------------------'
//                        | Meta | Space|  Nav |        |  Sym |Alt/Sp|Fn/Ent|
//                        `--------------------'        `--------------------'
//
// For keys marked with two options, holding or pressing with other keys will cause the first option
// to be used, tapping briefly will trigger the second.

//
// Symbols
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |    `   |  1   |  2   |  3   |  4   |  5   |        |   6  |  7   |  8   |  9   |  0   |   =    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |    ~   |  !   |  @   |  #   |  $   |  %   |        |   ^  |  &   |  *   |  (   |  )   |   +    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  |   |  \   |  -   |  [   |  {   |        |   }  |  ]   |  _   |  /   |      |        |
// `----------------------+------+------+------|        |------+------+------+----------------------'
//                        | Meta |  Alt | Ctrl |        |      |      |      |
//                        `--------------------'        `--------------------'
//

//
// Function
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |  F9  | F10  | F11  | F12  |      |        |      |      |      |      |      |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  F5  |  F6  |  F7  |  F8  |      |        |      | Shift| Ctrl |  Alt |  GUI |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  F1  |  F2  |  F3  |  F4  |      |        |      |      |      |      |      |        |
// `----------------------+------+------+------|        |------+------+------+----------------------'
//                        |      |      |      |        |      |      |      |
//                        `--------------------'        `--------------------'

//
// Navigation/Media
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |   Esc  | Meta |      |      |      |      |        | Vol+ | BkSp |   ↑  | Del  | PgUp |  Home  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  Tab |  Alt | Ctrl | Shift|      |        | Vol- |  ←   |   ↓  |   →  | PgDn |   End  |
// |--------+------+------+------+------+------+        +------+------+------+------+------+--------|
// |        |      |      |      |      |      |        | Mute |      |      |      |      |        |
// `----------------------+------+------+------+        +------+------+------+----------------------'
//                        |      |      |      |        |      | Space| Enter|
//                        `---------------------        ---------------------'
//

//
// Settings - pressing both 39th and 41st key together.
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |      |      |      |      |      |        | Hue+ | Sat+ |Brght+|      | Mode | Switch |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |      |      |      |      |        | Hue- | Sat- |Brght-|      |      |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |      |      |      |      |        |      |      |      |      |      |        |
// `----------------------+------+------+------|        |-------------------------------------------'
//                        |      |      |      |        |      |      |      |
//                        `--------------------'        `--------------------'
// Switch: Toggle whether to change light modes when changing from QWERTY to STENO mode
// Mode: Change RGB mode (either constant rgb or rainbow)

//---------------------------------------------------------------------------
// USB Scan code values.
//
// These constants are used with inbuilt functions:
//  * func pressScanCode(SC_xxx)
//  * func releaseScanCode(SC_xxx)
//  * func tapScanCode(SC_xxx)
//  * func isScanCodePressed(SC_xxx) var
//
//---------------------------------------------------------------------------

const SC_NONE = 0;

const SC_A = 0x04;
const SC_B = 0x05;
const SC_C = 0x06;
const SC_D = 0x07;
const SC_E = 0x08;
const SC_F = 0x09;
const SC_G = 0x0a;
const SC_H = 0x0b;
const SC_I = 0x0c;
const SC_J = 0x0d;
const SC_K = 0x0e;
const SC_L = 0x0f;
const SC_M = 0x10;
const SC_N = 0x11;
const SC_O = 0x12;
const SC_P = 0x13;
const SC_Q = 0x14;
const SC_R = 0x15;
const SC_S = 0x16;
const SC_T = 0x17;
const SC_U = 0x18;
const SC_V = 0x19;
const SC_W = 0x1a;
const SC_X = 0x1b;
const SC_Y = 0x1c;
const SC_Z = 0x1d;

const SC_1 = 0x1e;
const SC_2 = 0x1f;
const SC_3 = 0x20;
const SC_4 = 0x21;
const SC_5 = 0x22;
const SC_6 = 0x23;
const SC_7 = 0x24;
const SC_8 = 0x25;
const SC_9 = 0x26;
const SC_0 = 0x27;

const SC_ENTER = 0x28;
const SC_ESC = 0x29;
const SC_BACKSPACE = 0x2a;
const SC_TAB = 0x2b;
const SC_SPACE = 0x2c;
const SC_MINUS = 0x2d;
const SC_EQUAL = 0x2e;
const SC_L_BRACKET = 0x2f;
const SC_R_BRACKET = 0x30;
const SC_BACKSLASH = 0x31;
const SC_HASH_TILDE = 0x32;
const SC_SEMICOLON = 0x33;
const SC_APOSTROPHE = 0x34;
const SC_GRAVE = 0x35;
const SC_COMMA = 0x36;
const SC_DOT = 0x37;
const SC_SLASH = 0x38;
const SC_CAPS = 0x39;

const SC_F1 = 0x3a;
const SC_F2 = 0x3b;
const SC_F3 = 0x3c;
const SC_F4 = 0x3d;
const SC_F5 = 0x3e;
const SC_F6 = 0x3f;
const SC_F7 = 0x40;
const SC_F8 = 0x41;
const SC_F9 = 0x42;
const SC_F10 = 0x43;
const SC_F11 = 0x44;
const SC_F12 = 0x45;

const SC_SYS_RQ = 0x46;
const SC_SCROLL_LOCK = 0x47;
const SC_PAUSE = 0x48;
const SC_INSERT = 0x49;
const SC_HOME = 0x4a;
const SC_PAGE_UP = 0x4b;
const SC_DELETE = 0x4c;
const SC_END = 0x4d;
const SC_PAGE_DOWN = 0x4e;
const SC_RIGHT = 0x4f;
const SC_LEFT = 0x50;
const SC_DOWN = 0x51;
const SC_UP = 0x52;

const SC_NUM_LOCK = 0x53;
const SC_KP_SLASH = 0x54;
const SC_KP_ASTERISK = 0x55;
const SC_KP_MINUS = 0x56;
const SC_KP_PLUS = 0x57;
const SC_KP_ENTER = 0x58;
const SC_KP_1 = 0x59;
const SC_KP_2 = 0x5a;
const SC_KP_3 = 0x5b;
const SC_KP_4 = 0x5c;
const SC_KP_5 = 0x5d;
const SC_KP_6 = 0x5e;
const SC_KP_7 = 0x5f;
const SC_KP_8 = 0x60;
const SC_KP_9 = 0x61;
const SC_KP_0 = 0x62;
const SC_KP_DOT = 0x63;

const SC_BACKSLASH_PIPE = 0x64;
const SC_COMPOSE = 0x65;
const SC_POWER = 0x66;
const SC_KP_EQUAL = 0x67;

const SC_F13 = 0x68;
const SC_F14 = 0x69;
const SC_F15 = 0x6a;
const SC_F16 = 0x6b;
const SC_F17 = 0x6c;
const SC_F18 = 0x6d;
const SC_F19 = 0x6e;
const SC_F20 = 0x6f;
const SC_F21 = 0x70;
const SC_F22 = 0x71;
const SC_F23 = 0x72;
const SC_F24 = 0x73;

const SC_OPEN = 0x74;
const SC_HELP = 0x75;
const SC_MENU = 0x76;
const SC_SELECT = 0x77;
const SC_STOP = 0x78;
const SC_AGAIN = 0x79;
const SC_UNDO = 0x7a;
const SC_CUT = 0x7b;
const SC_COPY = 0x7c;
const SC_PASTE = 0x7d;
const SC_FIND = 0x7e;
const SC_MUTE = 0x7f;
const SC_VOLUME_UP = 0x80;
const SC_VOLUME_DOWN = 0x81;

const SC_KP_COMMA = 0x85;

const SC_KP_LEFT_PAREN = 0xb6;
const SC_KP_RIGHT_PAREN = 0xb7;

const SC_L_CTRL = 0xe0;
const SC_L_SHIFT = 0xe1;
const SC_L_ALT = 0xe2;
const SC_L_META = 0xe3;
const SC_R_CTRL = 0xe4;
const SC_R_SHIFT = 0xe5;
const SC_R_ALT = 0xe6;
const SC_R_META = 0xe7;

const SC_MEDIA_PLAY_PAUSE = 0xe8;
const SC_MEDIA_STOP_CD = 0xe9;
const SC_MEDIA_PREVIOUS_SONG = 0xea;
const SC_MEDIA_NEXT_SONG = 0xeb;
const SC_MEDIA_EJECT_CD = 0xec;
const SC_MEDIA_VOLUME_UP = 0xed;
const SC_MEDIA_VOLUME_DOWN = 0xee;
const SC_MEDIA_MUTE = 0xef;
const SC_MEDIA_WWW = 0xf0;
const SC_MEDIA_BACK = 0xf1;
const SC_MEDIA_FORWARD = 0xf2;
const SC_MEDIA_STOP = 0xf3;
const SC_MEDIA_FIND = 0xf4;
const SC_MEDIA_SCROLL_UP = 0xf5;
const SC_MEDIA_SCROLL_DOWN = 0xf6;
const SC_MEDIA_EDIT = 0xf7;
const SC_MEDIA_SLEEP = 0xf8;
const SC_MEDIA_COFFEE = 0xf9;
const SC_MEDIA_REFRESH = 0xfa;
const SC_MEDIA_CALC = 0xfb;

//---------------------------------------------------------------------------
// javelin-steno steno key values.
//
// These constants are used with inbuilt functions:
//  * func pressStenoKey(SK_xxx)
//  * func releaseStenoKey(SK_xxx)
//  * func isStenoKeyPressed(SK_xxx) var
//
//---------------------------------------------------------------------------

const SK_NONE = -1;
const SK_S1 = 0;
const SK_S2 = 1;
const SK_TL = 2;
const SK_KL = 3;
const SK_PL = 4;
const SK_WL = 5;
const SK_HL = 6;
const SK_RL = 7;
const SK_A = 8;
const SK_O = 9;
const SK_STAR1 = 10;
const SK_STAR2 = 11;
const SK_STAR3 = 12;
const SK_STAR4 = 13;
const SK_E = 14;
const SK_U = 15;
const SK_FR = 16;
const SK_RR = 17;
const SK_PR = 18;
const SK_BR = 19;
const SK_LR = 20;
const SK_GR = 21;
const SK_TR = 22;
const SK_SR = 23;
const SK_DR = 24;
const SK_ZR = 25;
const SK_NUM1 = 26;
const SK_NUM2 = 27;
const SK_NUM3 = 28;
const SK_NUM4 = 29;
const SK_NUM5 = 30;
const SK_NUM6 = 31;
const SK_NUM7 = 32;
const SK_NUM8 = 33;
const SK_NUM9 = 34;
const SK_NUM10 = 35;
const SK_NUM11 = 36;
const SK_NUM12 = 37;
const SK_FUNCTION = 38;
const SK_POWER = 39;
const SK_RES1 = 40;
const SK_RES2 = 41;

//---------------------------------------------------------------------------
// Other functions:
//
//  * func releaseAll()
//    - releases all pressed scan codes and steno keys.
//  * func pressAll()
//    - call all press scripts for buttons that are pressed.
//  * func isInPressAll() var
//    - returns non-zero if a pressAll is being processed.
//  * func isButtonPressed(buttonIndex) var
//    - Returns 1 if the physical button is pressed.
//  * func checkButtonState("01 10") var
//    - Returns if the current button state matches the string.
//    - 0 = not pressed, space = ignore, all others = pressed.
//      - The example string checks that:
//        - button 0 is off.
//        - button 1 is on.
//        - button 3 is on.
//        - button 4 is off.
//    - The string should be the same length as the number of buttons.
//  * func sendText("Example")
//    - Sends all of the key presses required to emit the specified string.
//    - e.g.,
//      - Press Shift
//      - Press E
//      - Release E
//      - Release Shift
//      - Press X
//      - Release X
//      - etc.
//  * func setRgb(id, r, g, b)
//    - For boards with rgb lights, sets an individual light to the r, g, b.
//  * func setHsv(id, h, s, v)
//    - For boards with rgb lights, sets an individual light to h, s, v.
//      - h = hue,        0-65536 represents 0°  - 360°
//      - s = saturation, 0-256   represents 0.0 - 1.0
//      - v = value,      0-255   represents 0.0 - 1.0
//  * func getTime() var
//    - Returns milliseconds since launch.
//  * func getLedStatus(id) var
//    - Returns whether the led statues is on. See LED_STATUS constants.
//
// releaseAll() and pressAll() are useful for changing modes/layers, e.g.:
//
// if (layer != SYMBOL_LAYER) {
//   releaseAll();
//   layer = SYMBOL_LAYER;
//   pressAll();
// }
//
// This will allow keys on the symbol layer to be pressed 'out-of-order' but
// still behave as expected.
//
// It is important that every pressAll() call in an onPress handler is guarded
// to prevent infinite recursion, since the onPress will be re-run even for the
// current key. The easiest way to do this is using isInPressAll() function.
//

const LED_STATUS_NUM_LOCK = 0;
const LED_STATUS_CAPS_LOCK = 1;
const LED_STATUS_SCROLL_LOCK = 2;
const LED_STATUS_COMPOSE = 3;
const LED_STATUS_KANA = 4;

//---------------------------------------------------------------------------
//
// Polyglot button layout:
//
// Button indexes
//
//      0   1   2   3   4   5  |   6   7   8   9  10  11
//     12  13  14  15  16  17  |  18  19  20  21  22  23
//     24  25  26  27  28  29  |  30  31  32  33  34  35
//                 36  37  38  |  39  40  41
//
// Bootsel Button (B button on the back of the Polyglot) is button 42.
//
//---------------------------------------------------------------------------
// Example global variable:
//   var layers = 0;

// Example local functions:
//
//   func useNavLayer() var {
//     return isButtonPressed(22);
//   }
//
//   func handlePress(stenoKey, navKey) {
//     if (useNavLayer()) {
//       pressScanCode(navKey);
//     } else {
//       pressStenoKey(stenoKey);
//     }
//   }
//
// Then the onPress handler could call handlePress(SK_S1 | KEY_STENO, SC_TAB);

//---------------------------------------------------------------------------
// The script needs to have onPress## and onRelease## functions for every
// physical button.
//---------------------------------------------------------------------------

const QWERTY_LAYER = 0;
const STENO_MASK = 1;
const SYMBOL_MASK = 2;
const FUNCTION_MASK = 4;
const NAV_MASK = 8;

var layer = STENO_MASK;
var otherPressCount = 0;

var underglowMode = layer;
var speed = 3;
var hueSpread = 4;
var hueShift = 38500;
var hueShiftChange = 65536 / 64;
var svChange = 17;
var brightness = 255 - (svChange * 4);
var saturation = 255;
var shouldToggleRgb = 0; // whether to change rgb mode when changing from QWERTY to STENO (and vice versa)
var isConstantRgb = 0; // whether to display a constant rgb value or to use rainbow

const KEY_STENO = 0x200;
const KEY_SHIFT = 0x100;
const TAP_THRESHOLD = 200; // milliseconds for keys that have alternates

const STENO_MODE_EMBEDDED = 0;
const STENO_MODE_GEMINI = 1;

func init() {
  updateUnderglowRgb();
}

const RGB_UPDATE_TIME = 20;
var lastRgbUpdateTime = 0;

func tick() {
  var time = getTime();
  if (time - lastRgbUpdateTime >= RGB_UPDATE_TIME) {
    lastRgbUpdateTime = time;
    updateUnderglowRgb();
  }
}

const SPEED_VALUES      = [[ 00 04 08 0c 10 18 20 30 40 ]];
const HUE_SPREAD_VALUES = [[ 00 10 20 28 30 38 40 48 50 ]];
const SATURATION_VALUES = [[ 00 20 40 50 60 68 70 78 80 ]];
const BRIGHTNESS_VALUES = [[ 00 08 10 20 30 40 50 60 80 ]];

func updateUnderglowRgbHueCycle(hShift, sat, spreadMultiplier, value) {
  for (var i = 0; i < 13; i = i + 1) {
    setHsv(
      i,
      (65536 - (spreadMultiplier * i)) + hShift,
      sat,
      value
    );
  }
}

func updateUnderglowHsvConstant(hue) {
  for (var i = 0; i < 13; i = i + 1) {
    setHsv(i, hue, saturation, brightness);
  }
}

func updateUnderglowRgb() {
  // ensure saturation and brightness are valid
  if (saturation < 0) {
    saturation = 0;
  }
  if (saturation > 255) {
    saturation = 255;
  }
  if (brightness < 0) {
    brightness = 0;
  }
  if (brightness > 255) {
    brightness = 255;
  }

  if (isConstantRgb) {
    updateUnderglowHsvConstant(hueShift);
  } else {
    updateUnderglowRgbHueCycle(
      getTime() * SPEED_VALUES[speed] + hueShift,
      saturation,
      (65536 / 12),
      brightness
    );
  }
}

func updateStenoMode() {
  // Four corner keys are 0, 11, 36, 41.
  if ((layer & STENO_MASK)
      && checkButtonState("100000000001000000000000000000000000100001")) {
    if (getParameter("steno_mode") != "embedded") {
      console("set_steno_mode embedded");
    } else {
      console("set_steno_mode gemini");
    }
    releaseAll();
  }
}

func press(key) {
  if (key == SC_NONE || key == SK_NONE) {
    return;
  }

  otherPressCount = otherPressCount + 1;
  if (key & KEY_STENO) {
    pressStenoKey(key & 0xff);
  } else {
    if (key & KEY_SHIFT) {
      pressScanCode(SC_L_SHIFT);
    }
    pressScanCode(key & 0xff);
  }
}

func release(key) {
  if (key == SC_NONE || key == SK_NONE) {
    return;
  }

  if (key & KEY_STENO) {
    releaseStenoKey(key & 0xff);
  } else {
    if (key & KEY_SHIFT) {
      releaseScanCode(SC_L_SHIFT);
    }
    releaseScanCode(key & 0xff);
  }
}

func isSettingsLayer() var {
  return isButtonPressed(39) && isButtonPressed(41);
}

func handlePress(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  if (isSettingsLayer()) { return; }
  if (layer & NAV_MASK) {
    press(navKey);
  } else if (layer & FUNCTION_MASK) {
    press(functionKey);
  } else if (layer & SYMBOL_MASK) {
    press(symbolsKey);
  } else if (layer & STENO_MASK) {
    press(stenoKey);
  } else {
    press(qwertyKey);
  }
}
func handleRelease(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  if (isSettingsLayer()) { return; }
  if (layer & NAV_MASK) {
    release(navKey);
  } if (layer & FUNCTION_MASK) {
    release(functionKey);
  } else if (layer & SYMBOL_MASK) {
    release(symbolsKey);
  } else if (layer & STENO_MASK) {
    release(stenoKey);
  } else {
    release(qwertyKey);
  }
}

func onPress0() {
  handlePress(SC_TAB, SK_NONE, SC_GRAVE, SC_NONE, SC_ESC);
  updateStenoMode();
}
func onRelease0() { handleRelease(SC_TAB, SK_NONE, SC_GRAVE, SC_NONE, SC_ESC); }

func onPress1() { handlePress(SC_Q, SK_S1 | KEY_STENO, SC_1, SC_F9, SC_NONE); }
func onRelease1() { handleRelease(SC_Q, SK_S1 | KEY_STENO, SC_1, SC_F9, SC_NONE); }

func onPress2() { handlePress(SC_W, SK_TL | KEY_STENO, SC_2, SC_F10, SC_L_META); }
func onRelease2() { handleRelease(SC_W, SK_TL | KEY_STENO, SC_2, SC_F10, SC_L_META); }

func onPress3() { handlePress(SC_E, SK_PL | KEY_STENO, SC_3, SC_F11, SC_NONE); }
func onRelease3() { handleRelease(SC_E, SK_PL | KEY_STENO, SC_3, SC_F11, SC_NONE); }

func onPress4() { handlePress(SC_R, SK_HL | KEY_STENO, SC_4, SC_F12, SC_NONE); }
func onRelease4() { handleRelease(SC_R, SK_HL | KEY_STENO, SC_4, SC_F12, SC_NONE); }

func onPress5() { handlePress(SC_T, SK_STAR1 | KEY_STENO, SC_5, SC_NONE, SC_NONE); }
func onRelease5() { handleRelease(SC_T, SK_STAR1 | KEY_STENO, SC_5, SC_NONE, SC_NONE); }

func onPress6() { 
    handlePress(SC_Y, SK_STAR2 | KEY_STENO, SC_6, SC_NONE, SC_VOLUME_UP);
    if (isSettingsLayer()) {
        hueShift = hueShift + hueShiftChange;
    }
}
func onRelease6() { handleRelease(SC_Y, SK_STAR2 | KEY_STENO, SC_6, SC_NONE, SC_VOLUME_UP); }

func onPress7() {
    handlePress(SC_U, SK_FR | KEY_STENO, SC_7, SC_NONE, SC_BACKSPACE);
    if (isSettingsLayer()) {
        saturation = saturation + svChange;
    }
}
func onRelease7() { handleRelease(SC_U, SK_FR | KEY_STENO, SC_7, SC_NONE, SC_BACKSPACE); }

func onPress8() {
    handlePress(SC_I, SK_PR | KEY_STENO, SC_8, SC_NONE, SC_UP);
    if (isSettingsLayer()) {
        brightness = brightness + svChange;
    }    
}
func onRelease8() { handleRelease(SC_I, SK_PR | KEY_STENO, SC_8, SC_NONE, SC_UP); }

func onPress9() { handlePress(SC_O, SK_LR | KEY_STENO, SC_9, SC_NONE, SC_DELETE); }
func onRelease9() { handleRelease(SC_O, SK_LR | KEY_STENO, SC_9, SC_NONE, SC_DELETE); }

func onPress10() {
  if (isSettingsLayer()) {
      isConstantRgb = !isConstantRgb;
  }
  handlePress(SC_P, SK_TR | KEY_STENO, SC_0, SC_NONE, SC_PAGE_UP);
}
func onRelease10() { handleRelease(SC_P, SK_TR | KEY_STENO, SC_0, SC_NONE, SC_PAGE_UP); }

func onPress11() {
  if (isSettingsLayer()) {
      shouldToggleRgb = !shouldToggleRgb;
  }
  handlePress(SC_BACKSPACE, SK_DR | KEY_STENO, SC_EQUAL, SC_NONE, SC_HOME);
  updateStenoMode();
}
func onRelease11() { handleRelease(SC_BACKSPACE, SK_DR | KEY_STENO, SC_EQUAL, SC_NONE, SC_HOME); }

// 2nd row

func onPress12() {
  handlePress(SC_L_CTRL, SK_NONE, SC_GRAVE | KEY_SHIFT, SC_NONE, SC_NONE);
}
func onRelease12() {
  handleRelease(SC_L_CTRL, SK_NONE, SC_GRAVE | KEY_SHIFT, SC_NONE, SC_NONE);
}

func onPress13() { handlePress(SC_A, SK_S2 | KEY_STENO, SC_1 | KEY_SHIFT, SC_F5, SC_TAB); }
func onRelease13() { handleRelease(SC_A, SK_S2 | KEY_STENO, SC_1 | KEY_SHIFT, SC_F5, SC_TAB); }

func onPress14() { handlePress(SC_S, SK_KL | KEY_STENO, SC_2 | KEY_SHIFT, SC_F6, SC_L_ALT); }
func onRelease14() { handleRelease(SC_S, SK_KL | KEY_STENO, SC_2 | KEY_SHIFT, SC_F6, SC_L_ALT); }

func onPress15() { handlePress(SC_D, SK_WL | KEY_STENO, SC_3 | KEY_SHIFT, SC_F7, SC_L_CTRL); }
func onRelease15() { handleRelease(SC_D, SK_WL | KEY_STENO, SC_3 | KEY_SHIFT, SC_F7, SC_L_CTRL); }

func onPress16() { handlePress(SC_F, SK_RL | KEY_STENO, SC_4 | KEY_SHIFT, SC_F8, SC_L_SHIFT); }
func onRelease16() { handleRelease(SC_F, SK_RL | KEY_STENO, SC_4 | KEY_SHIFT, SC_F8, SC_L_SHIFT); }

func onPress17() { handlePress(SC_G, SK_STAR3 | KEY_STENO, SC_5 | KEY_SHIFT, SC_NONE, SC_NONE); }
func onRelease17() { handleRelease(SC_G, SK_STAR3 | KEY_STENO, SC_5 | KEY_SHIFT, SC_NONE, SC_NONE); }

func onPress18() { 
    handlePress(SC_H, SK_STAR4 | KEY_STENO, SC_6 | KEY_SHIFT, SC_NONE, SC_VOLUME_DOWN);
    if (isSettingsLayer()) {
        hueShift = hueShift - hueShiftChange;
    }
}
func onRelease18() { handleRelease(SC_H, SK_STAR4 | KEY_STENO, SC_6 | KEY_SHIFT, SC_NONE, SC_VOLUME_DOWN); }

func onPress19() {
    handlePress(SC_J, SK_RR | KEY_STENO, SC_7 | KEY_SHIFT, SC_L_SHIFT, SC_LEFT);
    if (isSettingsLayer()) {
        saturation = saturation - svChange;
    }
}
func onRelease19() { handleRelease(SC_J, SK_RR | KEY_STENO, SC_7 | KEY_SHIFT, SC_L_SHIFT, SC_LEFT); }

func onPress20() {
    handlePress(SC_K, SK_BR | KEY_STENO, SC_8 | KEY_SHIFT, SC_L_CTRL, SC_DOWN);
    if (isSettingsLayer()) {
        brightness = brightness - svChange;
    }
}
func onRelease20() { handleRelease(SC_K, SK_BR | KEY_STENO, SC_8 | KEY_SHIFT, SC_L_CTRL, SC_DOWN); }

func onPress21() { handlePress(SC_L, SK_GR | KEY_STENO, SC_9 | KEY_SHIFT, SC_L_ALT, SC_RIGHT); }
func onRelease21() { handleRelease(SC_L, SK_GR | KEY_STENO, SC_9 | KEY_SHIFT, SC_L_ALT, SC_RIGHT); }

func onPress22() { handlePress(SC_SEMICOLON, SK_SR | KEY_STENO, SC_0 | KEY_SHIFT, SC_L_META, SC_PAGE_DOWN); }
func onRelease22() { handleRelease(SC_SEMICOLON, SK_SR | KEY_STENO, SC_0 | KEY_SHIFT, SC_L_META, SC_PAGE_DOWN); }

func onPress23() {
  handlePress(SC_APOSTROPHE, SK_ZR | KEY_STENO, SC_EQUAL | KEY_SHIFT, SC_NONE, SC_END);
}
func onRelease23() {
  handleRelease(SC_APOSTROPHE, SK_ZR | KEY_STENO, SC_EQUAL | KEY_SHIFT, SC_NONE, SC_END);
}

// 3rd row

func onPress24() { handlePress(SC_L_SHIFT, SC_VOLUME_UP, SC_NONE, SC_NONE, SC_NONE); }
func onRelease24() { handleRelease(SC_L_SHIFT, SC_VOLUME_UP, SC_NONE, SC_NONE, SC_NONE); }

func onPress25() { handlePress(SC_Z, SC_L_SHIFT, SC_BACKSLASH | KEY_SHIFT, SC_F1, SC_NONE); }
func onRelease25() { handleRelease(SC_Z, SC_L_SHIFT, SC_BACKSLASH | KEY_SHIFT, SC_F1, SC_NONE); }

func onPress26() { handlePress(SC_X, SC_L_CTRL, SC_BACKSLASH, SC_F2, SC_NONE); }
func onRelease26() { handleRelease(SC_X, SC_L_CTRL, SC_BACKSLASH, SC_F2, SC_NONE); }

func onPress27() { handlePress(SC_C, SC_L_ALT, SC_MINUS, SC_F3, SC_NONE); }
func onRelease27() { handleRelease(SC_C, SC_L_ALT, SC_MINUS, SC_F3, SC_NONE); }

func onPress28() { handlePress(SC_V, SC_L_META, SC_L_BRACKET, SC_F4, SC_NONE); }
func onRelease28() { handleRelease(SC_V, SC_L_META, SC_L_BRACKET, SC_F4, SC_NONE); }

func onPress29() { handlePress(SC_B, SC_SPACE, SC_L_BRACKET | KEY_SHIFT, SC_NONE, SC_NONE); }
func onRelease29() { handleRelease(SC_B, SC_SPACE, SC_L_BRACKET | KEY_SHIFT, SC_NONE, SC_NONE); }

func onPress30() { handlePress(SC_N, SC_VOLUME_DOWN, SC_R_BRACKET | KEY_SHIFT, SC_NONE, SC_MUTE); }
func onRelease30() { handleRelease(SC_N, SC_VOLUME_DOWN, SC_R_BRACKET | KEY_SHIFT, SC_NONE, SC_MUTE); }

func onPress31() { handlePress(SC_M, SC_LEFT, SC_R_BRACKET, SC_NONE, SC_NONE); }
func onRelease31() { handleRelease(SC_M, SC_LEFT, SC_R_BRACKET, SC_NONE, SC_NONE); }

func onPress32() { handlePress(SC_COMMA, SC_DOWN, SC_MINUS | KEY_SHIFT, SC_NONE, SC_NONE); }
func onRelease32() { handleRelease(SC_COMMA, SC_DOWN, SC_MINUS | KEY_SHIFT, SC_NONE, SC_NONE); }

func onPress33() { handlePress(SC_DOT, SC_UP, SC_SLASH, SC_NONE, SC_NONE); }
func onRelease33() { handleRelease(SC_DOT, SC_UP, SC_SLASH, SC_NONE, SC_NONE); }

func onPress34() { handlePress(SC_SLASH, SC_RIGHT, SC_NONE, SC_NONE, SC_NONE); }
func onRelease34() { handleRelease(SC_SLASH, SC_RIGHT, SC_NONE, SC_NONE, SC_NONE); }

var timer35;
var wasSteno35;
func onPress35() {
  if (isInPressAll()) {
    return;
  }
  if (layer >> 1) {
    return;
  }
  wasSteno35 = layer & STENO_MASK;
  if (wasSteno35) {
    releaseAll();
    layer = layer ^ STENO_MASK;
    otherPressCount = 0;
    pressAll();
  } else {
    pressScanCode(SC_L_SHIFT);
    otherPressCount = 0;
  }
  timer35 = getTime();
}
func onRelease35() {
  // Exit early if this was triggered from a releaseAll() script.
  if (isButtonPressed(35)) {
    return;
  }

  if (wasSteno35) {
    // If the keypress was in steno mode, and other keys were pressed, drop
    // immediately back to steno mode, and drop all masks.
    if (otherPressCount || layer) {
      releaseAll();
      layer = STENO_MASK;
    }
  } else {
    releaseScanCode(SC_L_SHIFT);

    // A tap of the key turns on steno mode.
    if ((layer | otherPressCount) == 0 && getTime() - timer35 < TAP_THRESHOLD) {
      releaseAll();
      layer = layer | STENO_MASK;
    }
  }
  
  // change rgb color mode if allowed
  if (shouldToggleRgb) {
    isConstantRgb = !isConstantRgb;
  }  
}

// 4th row

func onPress36() {
  handlePress(SC_L_META, SK_NUM1 | KEY_STENO, SC_L_META, SC_NONE, SC_NONE);
  updateStenoMode();
}
func onRelease36() { handleRelease(SC_L_META, SK_NUM1 | KEY_STENO, SC_L_META, SC_NONE, SC_NONE); }


func onPress37() { handlePress(SC_SPACE, SK_A | KEY_STENO, SC_L_ALT, SC_NONE, SC_NONE); }
func onRelease37() { handleRelease(SC_SPACE, SK_A | KEY_STENO, SC_L_ALT, SC_NONE, SC_NONE); }


func onPress38() {
  if (layer != 0) {
    handlePress(SC_NONE, SK_O | KEY_STENO, SC_L_CTRL, SC_NONE, SC_NONE);
  } else {
    otherPressCount = otherPressCount + 1;
    releaseAll();
    layer = layer | NAV_MASK;
    pressAll();
  }
}

func onRelease38() {
  if (layer & NAV_MASK) {
    releaseAll();
    layer = layer ^ NAV_MASK;
  } else {
    handleRelease(SC_NONE, SK_O | KEY_STENO, SC_L_CTRL, SC_NONE, SC_NONE);
  }
}

func onPress39() {
  if (layer != 0) {
    handlePress(SC_NONE, SK_E | KEY_STENO, SC_NONE, SC_NONE, SC_NONE);
  } else {
    otherPressCount = otherPressCount + 1;
    releaseAll();
    layer = layer | SYMBOL_MASK;
    pressAll();
  }
}

func onRelease39() {
  if (layer & SYMBOL_MASK) {
    releaseAll();
    layer = layer ^ SYMBOL_MASK;
  } else {
    handleRelease(SC_NONE, SK_E | KEY_STENO, SC_L_CTRL, SC_NONE, SC_NONE);
  }
}

var timer40;
func onPress40() {
  handlePress(SC_L_ALT, SK_U | KEY_STENO, SC_NONE, SC_NONE, SC_SPACE);
  timer40 = getTime();
  otherPressCount = 0;
}
func onRelease40() {
  handleRelease(SC_L_ALT, SK_U | KEY_STENO, SC_NONE, SC_NONE, SC_SPACE);
  if ((layer | otherPressCount) == 0 && getTime() - timer40 < TAP_THRESHOLD) {
    tapScanCode(SC_SPACE);
  }
}

var timer41;
func onPress41() {
  handlePress(SC_NONE, SK_NUM2 | KEY_STENO, SC_NONE, SC_NONE, SC_ENTER);
  if (layer == 0) {
    timer41 = getTime();
    releaseAll();
    layer = layer | FUNCTION_MASK;
    otherPressCount = 0;
    pressAll();
  }
  updateStenoMode();
}
func onRelease41() {
  handleRelease(SC_NONE, SK_NUM2 | KEY_STENO, SC_NONE, SC_NONE, SC_ENTER);
  if (layer & FUNCTION_MASK) {
    if (otherPressCount == 0 && getTime() - timer41 < TAP_THRESHOLD) {
      tapScanCode(SC_ENTER);
    }
    releaseAll();
    layer = layer ^ FUNCTION_MASK;
  }
}

func onPress42() { console("launch_bootrom"); }
func onRelease42() {}